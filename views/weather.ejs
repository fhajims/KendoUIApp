<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <%- include("header.ejs")%>
    <h1>Weather Forecast</h1>
    <form id="weatherForm">
        <label for="location">Locations:</label>
        <input type="text" id="locations" name="locations" required>
        <br>
        <label for="fromDate">From:</label>
        <input type="date" id="fromDate" name="fromDate" required>
        <br>
        <label for="toDate">To:</label>
        <input type="date" id="toDate" name="toDate" required>
        <br>
        <button type="submit">Get Forecast</button>
    </form>

    <h1>Geocoding Form</h1>

<form id="geocodingForm">
  <label for="location">Enter a location:</label>
  <input type="text" id="location" name="location">
  <button type="submit">Get Coordinates</button>
</form>

<div id="result"></div>

<script>
document.getElementById("geocodingForm").addEventListener("submit", function(event) {
  event.preventDefault(); // Prevent the form from submitting normally
  
  var location = document.getElementById("location").value;
  
  // Call a function to fetch the coordinates for the entered location
  getCoordinates(location);
});

function getCoordinates(location) {
  // You need to use a geocoding service for this, such as Google Maps Geocoding API, OpenStreetMap Nominatim, etc.
  // Here's a simple example using the OpenStreetMap Nominatim API
  var apiUrl = `https://nominatim.openstreetmap.org/search?format=json&q=<${location}>`;
  console.log(apiUrl)
  fetch(apiUrl)
    .then(response => response.json())
    .then(data => {
      if (data.length > 0) {
        var latitude = data[0].boundingbox[0];
        var longitude = data[0].boundingbox[1];
        var thirdcoordinate = data[0].boundingbox[2];
        var fourthcoordinate = data[0].boundingbox[3];
        var addresstype = data[0].addresstype
        var longitude = data[0].lon
        var latitude = data[0].lat    
        document.getElementById("result").innerHTML = "FirstCoordinate " + latitude + "<br>SecondCoordinate " + longitude + "<br>ThirdCoordinate" + thirdcoordinate + "<br>FourthCoordinate" + fourthcoordinate +"<br>Adresstype " + addresstype + "<br>Longitude " + longitude + "<br>Latitude " + latitude;
      } else {
        console.log("Siuuu")
        document.getElementById("result").innerHTML = "Location not found.";
      }
    })
    .catch(error => {
      console.error("Error fetching data:", error);
      document.getElementById("result").innerHTML = "An error occurred. Please try again later.";
    });
}
</script>

    <!-- Script to handle form submission and API request -->
    <script>
        document.getElementById('weatherForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent form submission

            // Get user input
            const location = document.getElementById('location').value;
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;

            // Perform validation if needed

            // Construct API request URL (replace with your weather API endpoint)
            const apiUrl = `https://yourweatherapi.com/forecast?location=${location}&fromDate=${fromDate}&toDate=${toDate}`;

            // Make request to weather API (using fetch or XMLHttpRequest)
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Process weather forecast data and update UI
                    console.log(data); // Example: log the data to the console
                    // You can update the UI here with the weather forecast data
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    // Handle errors and display an error message to the user if needed
                });
        });

        

    </script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>
</html>
